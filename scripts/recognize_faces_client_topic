#!/usr/bin/env python

import sys
import rospy
import cv2
import numpy as np
from cv_bridge import CvBridge, CvBridgeError
from face_recognition_ros_wrapper.srv import *


##########
import time

def TicTocGenerator():
    # Generator that returns time differences
    ti = 0           # initial time
    tf = time.time() # final time
    while True:
        ti = tf
        tf = time.time()
        yield tf-ti # returns the time difference

# This will be the main function through which we define both tic() and toc()
def toc(tempBool=True):
    # Prints the time difference yielded by generator instance TicToc
    tempTimeInterval = next(TicToc)
    if tempBool:
        print( "Elapsed time: %f seconds.\n" %tempTimeInterval )

def tic():
    # Records a time in TicToc, marks the beginning of a time interval
    toc(False)

##########


def recognize_faces_client():
    rospy.wait_for_service('recognize_faces_image')
    try:
        recognize_faces_image = rospy.ServiceProxy('recognize_faces_image', RecognizeFacesImage)
        resp1 = recognize_faces_image()
        return resp1.recognized_person
    except rospy.ServiceException as e:
        print("Service call failed: " + str(e))

def usage():
    return sys.argv[0] + "[image]"

if __name__ == "__main__":
    # if len(sys.argv) == 2:
    #     image_path = str(sys.argv[1])
    # else:
    #     print(usage())
    #     sys.exit(1)
    # print("Requesting for image ")

    # image_cv = cv2.imread(image_path)
    # image = CvBridge().cv2_to_imgmsg(image_cv, "bgr8")

    # cv2.imshow('image_client',image_cv)
    # cv2.waitKey(0)
    # cv2.destroyAllWindows()

    TicToc = TicTocGenerator() # create an instance of the TicTocGen generator

    tic()
    print("Response: " + str(recognize_faces_client()))
    toc()
    
    # tic()
    # print("Response: " + str(recognize_faces_client()))
    # toc()