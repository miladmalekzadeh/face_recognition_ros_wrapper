#!/usr/bin/env python

from face_recognition_ros_wrapper.srv import RecognizeFacesImage, RecognizeFacesImageResponse
import rospy
import cv2
import face_recognition
import pickle

import inspect
import os
from cv_bridge import CvBridge, CvBridgeError


import time
def TicTocGenerator():
    # Generator that returns time differences
    ti = 0           # initial time
    tf = time.time() # final time
    while True:
        ti = tf
        tf = time.time()
        yield tf-ti # returns the time difference

TicToc = TicTocGenerator() # create an instance of the TicTocGen generator

# This will be the main function through which we define both tic() and toc()
def toc(tempBool=True):
    # Prints the time difference yielded by generator instance TicToc
    tempTimeInterval = next(TicToc)
    if tempBool:
        print( "Elapsed time: %f seconds.\n" %tempTimeInterval )

def tic():
    # Records a time in TicToc, marks the beginning of a time interval
    toc(False)


def handle_recognize_faces(req):
    name = "Unknown" 
    names = []
    #image = cv2.imread(req.image_path)
    try:
        image = CvBridge().imgmsg_to_cv2(req.image, "bgr8")
    except CvBridgeError as e:
        print(e)
    # cv2.imshow('image_server',image)
    # cv2.waitKey(0)
    # cv2.destroyAllWindows()

    # rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    rgb = image
    
    # cv2.imshow('image_rgb',rgb)
    # cv2.waitKey(0)
    # cv2.destroyAllWindows()

    face_encodings_file = rospy.get_param("face_encodings_location")
    tic()
    X, y = pickle.loads(open(face_encodings_file, "rb").read())
    toc()
    #print("Detecting faces in image: " + req.image_path)

    boxes = face_recognition.face_locations(rgb, model='hog')
    if not boxes:
        return RecognizeFacesImageResponse(name)
    
    # detect all of the faces' encodings
    encodings = face_recognition.face_encodings(rgb, boxes)
    # go through all of the faces
    for encoding in encodings:
        matches = face_recognition.compare_faces(X, encoding)
        if True in matches:
            matchedIdxs = [i for (i, b) in enumerate(matches) if b]
            counts = {}
            for i in matchedIdxs:
                name = y[i]
                counts[name] = counts.get(name, 0) + 1        
            name = max(counts, key=counts.get)
        names.append(name)
    print(names)
    
    return RecognizeFacesImageResponse(names)

def recognize_faces_server_image():
    rospy.init_node("recognize_faces_server_image")
    s = rospy.Service('recognize_faces_image', RecognizeFacesImage, handle_recognize_faces)
    print("Ready to recognize faces")
    rospy.spin()


if __name__ == "__main__":
    recognize_faces_server_image()
